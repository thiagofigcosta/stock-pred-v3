FROM gcr.io/deeplearning-platform-release/tf2-cpu.2-13.py310 AS builder

RUN apt-get update && apt-get install -y --no-install-recommends make cmake libc6-dev gcc

RUN wget http://prdownloads.sourceforge.net/ta-lib/ta-lib-0.4.0-src.tar.gz -O /tmp/ta_lib.tar.gz
RUN tar -xzf /tmp/ta_lib.tar.gz
RUN cd ta-lib && ./configure && make && make install

COPY requirements_tf2.txt requirements.txt
RUN pip install --user -r requirements.txt



FROM gcr.io/deeplearning-platform-release/tf2-cpu.2-13.py310 AS slim

RUN apt-get update && apt-get install -y --no-install-recommends graphviz make cmake gcc g++ libc6-dev procps build-essential openjdk-11-jdk zip unzip python3-dev python3-pip python3-venv patchelf

COPY --from=builder /tmp/ta_lib.tar.gz /tmp/ta_lib.tar.gz
RUN tar -xzf /tmp/ta_lib.tar.gz
RUN cd ta-lib/ && ./configure && make && make install

COPY --from=builder /root/.local /root/.local


### building tensorflow to enable AVX (this image is not so slim anymore :/)

# compiling crashes without `--local_cpu_resources=1`

# RUN lsb_release -a 1>&2 ; exit 1
# RUN python3 -c 'import tensorflow as tf; print(tf.__version__)' 1>&2 ; exit 1
# RUN python3 -c 'import tensorflow.python.platform.build_info as build ;  print("Version", build.build_info["cudnn_version"])' 1>&2 ; exit 1
# RUN nvcc --version 1>&2 ; exit 1
RUN wget https://apt.llvm.org/llvm.sh && chmod u+x llvm.sh && ./llvm.sh 16
RUN update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-16 100 ; update-alternatives --install /usr/bin/clang clang /usr/bin/clang-16 100
RUN (cd "/usr/local/lib/bazel/bin" && curl -fLO https://releases.bazel.build/5.3.0/release/bazel-5.3.0-linux-x86_64 && chmod +x bazel-5.3.0-linux-x86_64)
RUN git clone https://github.com/tensorflow/tensorflow.git
RUN cd tensorflow && \
git checkout v2.13.1 && \
./configure && \
bazel build -c opt --copt=-march=native --copt=-mavx --copt=-mavx2 --copt=-mfma --copt=-mfpmath=both --copt=-msse4.2 --local_ram_resources="HOST_RAM*.80" --local_cpu_resources=1 --verbose_failures -k //tensorflow/tools/pip_package:build_pip_package 
RUN cd tensorflow && \
./bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/tensorflow_pkg 
RUN pip install /tmp/tensorflow_pkg/tensorflow-*.whl


### end building TF

WORKDIR /code

# RUN echo "dirty little build cache" # comment and uncomment me

COPY entrypoint.sh /
COPY clean_up_generated_files.sh .
COPY kill_all_python_tasks.sh .
COPY ./*.py ./
# RUN --mount=type=bind,source=jars,target=/build/jars \
#  find datasets -type f -maxdepth 1  -print0 \
#  | xargs -0 --no-run-if-empty --replace=source cp --force source >"." # workaround to copy only if exists
RUN mkdir -p hyperparameters ; mkdir -p logs ; mkdir -p models ; mkdir -p nas ; \
mkdir -p prophets ; mkdir -p saved_plots ; mkdir -p experiments ; mkdir -p datasets

RUN chmod +x /entrypoint.sh
RUN chmod +x clean_up_generated_files.sh
RUN chmod +x kill_all_python_tasks.sh
RUN chmod -R 777 hyperparameters
RUN chmod -R 777 logs
RUN chmod -R 777 models
RUN chmod -R 777 nas
RUN chmod -R 777 prophets
RUN chmod -R 777 saved_plots
RUN chmod -R 777 experiments

ENV PATH=/root/.local/bin:$PATH









CMD ["/entrypoint.sh"]